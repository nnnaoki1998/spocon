## [Start] Set query expression for key **
#if( $util.isNull($ctx.args.chatRoomId) && !$util.isNull($ctx.args.sortDirection) )
  $util.error("When providing argument 'sortDirection' you must also provide argument 'chatRoomId'.", "InvalidArgumentsError")
#end
#set( $modelQueryExpression = {} )
## [Start] Validate key arguments. **
#if( !$util.isNull($ctx.args.writeDateTimeTeamId) && $util.isNullOrBlank($ctx.args.chatRoomId) )
  $util.error("When providing argument 'writeDateTimeTeamId' you must also provide 'chatRoomId'.", "InvalidArgumentsError")
#end
#if( !$util.isNull($ctx.args.writeDateTimeTeamId) )
  #set( $sortKeyArgumentOperations = $ctx.args.writeDateTimeTeamId.keySet() )
  #if( $sortKeyArgumentOperations.size() > 1 )
    $util.error("Argument writeDateTimeTeamId must specify at most one key condition operation.", "InvalidArgumentsError")
  #end
  #foreach( $operation in $sortKeyArgumentOperations )
    #if( $operation == "between" )
      #if( $ctx.args.writeDateTimeTeamId.between.size() != 2 )
        $util.error("Argument 'writeDateTimeTeamId.between' expects exactly two elements.", "InvalidArgumentsError")
      #end
      #if( !$util.isNullOrBlank($ctx.args.writeDateTimeTeamId.between[0].teamId) && $util.isNullOrBlank($ctx.args.writeDateTimeTeamId.between[0].writeDateTime) )
        $util.error("When providing argument 'writeDateTimeTeamId.between[0].teamId' you must also provide 'writeDateTimeTeamId.between[0].writeDateTime'.", "InvalidArgumentsError")
      #end
      #if( !$util.isNullOrBlank($ctx.args.writeDateTimeTeamId.between[1].teamId) && $util.isNullOrBlank($ctx.args.writeDateTimeTeamId.between[1].writeDateTime) )
        $util.error("When providing argument 'writeDateTimeTeamId.between[1].teamId' you must also provide 'writeDateTimeTeamId.between[1].writeDateTime'.", "InvalidArgumentsError")
      #end
    #else
      #if( !$util.isNullOrBlank($ctx.args.writeDateTimeTeamId.get("$operation").teamId) && $util.isNullOrBlank($ctx.args.writeDateTimeTeamId.get("$operation").writeDateTime) )
        $util.error("When providing argument 'writeDateTimeTeamId.$operation.teamId' you must also provide 'writeDateTimeTeamId.$operation.writeDateTime'.", "InvalidArgumentsError")
      #end
    #end
  #end
#end
## [End] Validate key arguments. **
#if( !$util.isNull($ctx.args.chatRoomId) )
  #set( $modelQueryExpression.expression = "#chatRoomId = :chatRoomId" )
  #set( $modelQueryExpression.expressionNames = {
  "#chatRoomId": "chatRoomId"
} )
  #set( $modelQueryExpression.expressionValues = {
  ":chatRoomId": {
      "S": "$ctx.args.chatRoomId"
  }
} )
#end
## [Start] Applying Key Condition **
#set( $sortKeyValue = "" )
#set( $sortKeyValue2 = "" )
#if( !$util.isNull($ctx.args.writeDateTimeTeamId) && !$util.isNull($ctx.args.writeDateTimeTeamId.beginsWith) )
#if( !$util.isNull($ctx.args.writeDateTimeTeamId.beginsWith.writeDateTime) ) #set( $sortKeyValue = "$ctx.args.writeDateTimeTeamId.beginsWith.writeDateTime" ) #end
#if( !$util.isNull($ctx.args.writeDateTimeTeamId.beginsWith.teamId) ) #set( $sortKeyValue = "$sortKeyValue#$ctx.args.writeDateTimeTeamId.beginsWith.teamId" ) #end
  #set( $modelQueryExpression.expression = "$modelQueryExpression.expression AND begins_with(#sortKey, :sortKey)" )
  $util.qr($modelQueryExpression.expressionNames.put("#sortKey", "writeDateTime#teamId"))
  $util.qr($modelQueryExpression.expressionValues.put(":sortKey", { "S": "$sortKeyValue" }))
#end
#if( !$util.isNull($ctx.args.writeDateTimeTeamId) && !$util.isNull($ctx.args.writeDateTimeTeamId.between) )
  #if( $ctx.args.writeDateTimeTeamId.between.size() != 2 )
    $util.error("Argument writeDateTimeTeamId.between expects exactly 2 elements.")
  #end
#if( !$util.isNull($ctx.args.writeDateTimeTeamId.between[0].writeDateTime) ) #set( $sortKeyValue = "$ctx.args.writeDateTimeTeamId.between[0].writeDateTime" ) #end
#if( !$util.isNull($ctx.args.writeDateTimeTeamId.between[0].teamId) ) #set( $sortKeyValue = "$sortKeyValue#$ctx.args.writeDateTimeTeamId.between[0].teamId" ) #end
#if( !$util.isNull($ctx.args.writeDateTimeTeamId.between[1].writeDateTime) ) #set( $sortKeyValue2 = "$ctx.args.writeDateTimeTeamId.between[1].writeDateTime" ) #end
#if( !$util.isNull($ctx.args.writeDateTimeTeamId.between[1].teamId) ) #set( $sortKeyValue2 = "$sortKeyValue2#$ctx.args.writeDateTimeTeamId.between[1].teamId" ) #end
  #set( $modelQueryExpression.expression = "$modelQueryExpression.expression AND #sortKey BETWEEN :sortKey0 AND :sortKey1" )
  $util.qr($modelQueryExpression.expressionNames.put("#sortKey", "writeDateTime#teamId"))
  $util.qr($modelQueryExpression.expressionValues.put(":sortKey0", { "S": "$sortKeyValue" }))
  $util.qr($modelQueryExpression.expressionValues.put(":sortKey1", { "S": "$sortKeyValue2" }))
#end
#if( !$util.isNull($ctx.args.writeDateTimeTeamId) && !$util.isNull($ctx.args.writeDateTimeTeamId.eq) )
#if( !$util.isNull($ctx.args.writeDateTimeTeamId.eq.writeDateTime) ) #set( $sortKeyValue = "$ctx.args.writeDateTimeTeamId.eq.writeDateTime" ) #end
#if( !$util.isNull($ctx.args.writeDateTimeTeamId.eq.teamId) ) #set( $sortKeyValue = "$sortKeyValue#$ctx.args.writeDateTimeTeamId.eq.teamId" ) #end
  #set( $modelQueryExpression.expression = "$modelQueryExpression.expression AND #sortKey = :sortKey" )
  $util.qr($modelQueryExpression.expressionNames.put("#sortKey", "writeDateTime#teamId"))
  $util.qr($modelQueryExpression.expressionValues.put(":sortKey", { "S": "$sortKeyValue" }))
#end
#if( !$util.isNull($ctx.args.writeDateTimeTeamId) && !$util.isNull($ctx.args.writeDateTimeTeamId.lt) )
#if( !$util.isNull($ctx.args.writeDateTimeTeamId.lt.writeDateTime) ) #set( $sortKeyValue = "$ctx.args.writeDateTimeTeamId.lt.writeDateTime" ) #end
#if( !$util.isNull($ctx.args.writeDateTimeTeamId.lt.teamId) ) #set( $sortKeyValue = "$sortKeyValue#$ctx.args.writeDateTimeTeamId.lt.teamId" ) #end
  #set( $modelQueryExpression.expression = "$modelQueryExpression.expression AND #sortKey < :sortKey" )
  $util.qr($modelQueryExpression.expressionNames.put("#sortKey", "writeDateTime#teamId"))
  $util.qr($modelQueryExpression.expressionValues.put(":sortKey", { "S": "$sortKeyValue" }))
#end
#if( !$util.isNull($ctx.args.writeDateTimeTeamId) && !$util.isNull($ctx.args.writeDateTimeTeamId.le) )
#if( !$util.isNull($ctx.args.writeDateTimeTeamId.le.writeDateTime) ) #set( $sortKeyValue = "$ctx.args.writeDateTimeTeamId.le.writeDateTime" ) #end
#if( !$util.isNull($ctx.args.writeDateTimeTeamId.le.teamId) ) #set( $sortKeyValue = "$sortKeyValue#$ctx.args.writeDateTimeTeamId.le.teamId" ) #end
  #set( $modelQueryExpression.expression = "$modelQueryExpression.expression AND #sortKey <= :sortKey" )
  $util.qr($modelQueryExpression.expressionNames.put("#sortKey", "writeDateTime#teamId"))
  $util.qr($modelQueryExpression.expressionValues.put(":sortKey", { "S": "$sortKeyValue" }))
#end
#if( !$util.isNull($ctx.args.writeDateTimeTeamId) && !$util.isNull($ctx.args.writeDateTimeTeamId.gt) )
#if( !$util.isNull($ctx.args.writeDateTimeTeamId.gt.writeDateTime) ) #set( $sortKeyValue = "$ctx.args.writeDateTimeTeamId.gt.writeDateTime" ) #end
#if( !$util.isNull($ctx.args.writeDateTimeTeamId.gt.teamId) ) #set( $sortKeyValue = "$sortKeyValue#$ctx.args.writeDateTimeTeamId.gt.teamId" ) #end
  #set( $modelQueryExpression.expression = "$modelQueryExpression.expression AND #sortKey > :sortKey" )
  $util.qr($modelQueryExpression.expressionNames.put("#sortKey", "writeDateTime#teamId"))
  $util.qr($modelQueryExpression.expressionValues.put(":sortKey", { "S": "$sortKeyValue" }))
#end
#if( !$util.isNull($ctx.args.writeDateTimeTeamId) && !$util.isNull($ctx.args.writeDateTimeTeamId.ge) )
#if( !$util.isNull($ctx.args.writeDateTimeTeamId.ge.writeDateTime) ) #set( $sortKeyValue = "$ctx.args.writeDateTimeTeamId.ge.writeDateTime" ) #end
#if( !$util.isNull($ctx.args.writeDateTimeTeamId.ge.teamId) ) #set( $sortKeyValue = "$sortKeyValue#$ctx.args.writeDateTimeTeamId.ge.teamId" ) #end
  #set( $modelQueryExpression.expression = "$modelQueryExpression.expression AND #sortKey >= :sortKey" )
  $util.qr($modelQueryExpression.expressionNames.put("#sortKey", "writeDateTime#teamId"))
  $util.qr($modelQueryExpression.expressionValues.put(":sortKey", { "S": "$sortKeyValue" }))
#end


## [End] Applying Key Condition **
## [End] Set query expression for key **
$util.qr($ctx.stash.put("modelQueryExpression", $modelQueryExpression))
{}